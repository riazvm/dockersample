# Set up dind and log into a givens Docker registry
#
# Variables:
#   CI_REGISTRY
#   CI_REGISTRY_USER
#   CI_REGISTRY_PASSWORD
._docker:
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://localhost:2375/
    DOCKER_TLS_CERTDIR: ""
  image: harbor.corp.local/library/docker:19.03.0
  services:
    - docker:19.03.1-dind
  before_script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" "${CI_REGISTRY}" --password-stdin

# Copy an image from a source to a destination
#
# Variables:
#   IMAGE
#   IMAGE_VERSION
#   DESTINATION_REGISTRY
#   ALWAYS_PULL (Default: false)
#   DESTINATION_PROJECT (Optional)
#   SOURCE_REGISTRY (Optional)
.docker_cp:
  extends: ._docker
  script:
    - IMAGE_NAME=${IMAGE}:${IMAGE_VERSION}
    - SOURCE_IMAGE=${SOURCE_REGISTRY:+${SOURCE_REGISTRY}/}$IMAGE_NAME
    - DESTINATION_IMAGE_NAME=${DESTINATION_PROJECT:+${DESTINATION_PROJECT}/}${IMAGE_NAME}
    - DESTINATION_IMAGE=${DESTINATION_REGISTRY}/${DESTINATION_IMAGE_NAME}
    - |
      if ! docker image pull $DESTINATION_IMAGE >/dev/null; then
        docker image pull ${SOURCE_IMAGE}
        docker image tag ${SOURCE_IMAGE} ${DESTINATION_IMAGE}
        docker image push ${DESTINATION_IMAGE}
      else
        echo "Image ${IMAGE_NAME} already present in ${DESTINATION_REGISTRY} registry"
      fi
  rules:
    - if: $IMAGE && $IMAGE_VERSION && $DESTINATION_REGISTRY

# Build from a Dockerfile
#
# Variables:
#   DOCKERFILE
#     Location of the Dockerfile.
#   IMAGE_NAME
#     Name of the image
#   PROJECT
#     Prefix to $IMAGE_NAME
#   BUILD_ARGS (Optional)
#     Variables to use as build args. Formated as a bash array, ex. `BUILD_ARGS: "VAR1 VAR2 VAR3"`.
#   PREBUILD_COMMAND (Optional)
.docker_build:
  extends: ._docker
  script:
    - BUILD_IMAGE_NAME=${CI_REGISTRY}/${PROJECT}/${IMAGE_NAME}:${CI_COMMIT_SHA}
    - |
      if ! docker image pull $BUILD_IMAGE_NAME >/dev/null; then
        set +x
        ${PREBUILD_COMMAND:+${PREBUILD_COMMAND}}
        BUILD_ARGS_FLAGS=${BUILD_ARGS:+$(printf -- "--build-arg %s " ${BUILD_ARGS[@]})}
        docker image build -f ${DOCKERFILE} --tag ${BUILD_IMAGE_NAME} ${BUILD_ARGS_FLAGS} --build-arg IMAGE_BUILD_TIME="$(TZ=UTC date -R)" ${CI_PROJECT_DIR}
        docker image push ${BUILD_IMAGE_NAME}
        set +x
      else
        echo "Image ${BUILD_IMAGE_NAME} already present"
      fi
  rules:
    - if: $DOCKERFILE && $IMAGE_NAME && $PROJECT

# Publish Docker image as a commit tag
#
# Variables:
#   IMAGE_NAME
#   PROJECT
.docker_publish:
  extends: ._docker
  script:
    - IMAGE=${CI_REGISTRY}/${PROJECT}/${IMAGE_NAME}
    - PULL_IMAGE_NAME=${IMAGE}:${CI_COMMIT_SHA}
    - PUSH_IMAGE_NAME=${IMAGE}:${CI_COMMIT_TAG}
    - docker image pull ${PULL_IMAGE_NAME}
    - docker image tag ${PULL_IMAGE_NAME} ${PUSH_IMAGE_NAME}
    - docker image push ${PUSH_IMAGE_NAME}
  rules:
    - if: $IMAGE_NAME && $CI_COMMIT_TAG && $PROJECT
    
.build:
  extends: ._docker
  variables:
    DOCKERFILE: ${CI_PROJECT_DIR}/images/Dockerfile
  script:
    - export IMAGE_NAME=${CI_REGISTRY}/library/docker:$DOCKER_VERSION
    - docker build -f ${DOCKERFILE} --build-arg DOCKER_VERSION --build-arg DOCKER_CMD -t ${IMAGE_NAME} .
    - docker push ${IMAGE_NAME}

Docker 19.03.8:
  extends: .build
  variables:
    DOCKER_VERSION: 19.03.8
    DOCKER_CMD: ""



Docker 19.03.0:
  extends: .build
  variables:
    DOCKER_VERSION: 19.03.0
    DOCKER_CMD: ""

.Docker 19.03.0 dind:
  extends: .build
  variables:
    DOCKER_VERSION: 19.03.0-dind
    DOCKER_CMD: ""
